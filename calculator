from tkinter import Tk
from tkinter import StringVar, Entry, Button
from math import pi,e,sin,cos,tan,log,log10,ceil,degrees,radians,exp,asin,acos,floor
π = pi
arcsin = asin
arccos = acos
class calculator:
    def __init__(self):
        window = Tk()
        window.title('Scientific Calculator')
        window.configure(background="white")
        self.string = StringVar()
        self.result = StringVar()
        self.show = StringVar()
        entry = Entry(window, textvariable=self.string)
        entry.grid(row = 0, column = 0, columnspan = 6)
        entry.configure(background="white")
        entry.focus()
        self.res = Entry(window,textvariable=self.show)
        self.res.grid(row=1, column=0, columnspan=6)
        self.res.configure(background="white")
        self.res.focus()

        values = ["7", "8", "9", "/", "mod", "←", "AC",
                  "4", "5", "6", "*", "(", ")", "^",
                  "1", "2", "3", "-", "=", ",", "0", ".", "min", "+", "sin", "arcsin", "cos", "arccos", "tan",
                  "pow", "lg", "max", "abs", "floor", "π", "e", "log", "ceil", "degrees", "radians"]
        text = 1
        i = 0
        row = 2
        col = 0
        for txt in values:
            padx = 10
            pady = 10
            if (i == 7):
                row = 3
                col = 0
            if (i == 14):
                row = 4
                col = 0
            if (i == 19):
                row = 5
                col = 0
            if (i == 26):
                row = 6
                col = 0
            if (i == 33):
                row = 7
                col = 0
            if (txt == '='):
                btn = Button(window, height=2, width=4, padx=70, pady=pady, text=txt,
                             command=lambda txt=txt: self.equals())
                btn.grid(row=row, column=col, columnspan=3, padx=2, pady=2)
                btn.configure(background="orange")

            elif (txt == '←'):
                btn = Button(window, height=2, width=4, padx=padx, pady=pady, text=txt,
                             command=lambda txt=txt: self.delete())
                btn.grid(row=row, column=col, padx=1, pady=1)
                btn.configure(background="grey")
            elif (txt == 'AC'):
                btn = Button(window, height=2, width=4, padx=padx, pady=pady, text=txt,
                             command=lambda txt=txt: self.clearall())
                btn.grid(row=row, column=col, padx=1, pady=1)
                btn.configure(background="white")
            elif (txt == '^'):
                btn = Button(window, height=2, width=4, padx=padx, pady=pady, text=txt,
                             command=lambda txt=txt: self.addChar('**'))
                btn.grid(row=row, column=col, padx=1, pady=1)
                btn.configure(background="white")
            elif (txt == 'mod'):
                btn = Button(window, height=2, width=4, padx=padx, pady=pady, text=txt,
                             command=lambda txt=txt: self.addChar('%'))
                btn.grid(row=row, column=col, padx=1, pady=1)
                btn.configure(background="white")
            else:
                btn = Button(window, height=2, width=4, padx=padx, pady=pady, text=txt,
                             command=lambda txt=txt: self.addChar(txt))
                btn.grid(row=row, column=col, padx=1, pady=1)
                btn.configure(background="white")

            col = col + 1
            i = i + 1
        window.mainloop()

    def clearall(self):
        self.string.set("")
        self.result.set("")
        self.show.set("")
    def equals(self):
        res1 = ("")
        try:
            res1 = eval(self.result.get())
            self.show.set(res1)
        except:
            res1 = "INVALID INPUT"
            self.show.set(res1)
    def addChar(self, char):
       if(char == '**'):
            self.string.set(self.string.get() + (str('^')))
            self.result.set(self.result.get() + (str('**')))
       else:
            self.string.set(self.string.get() + (str(char)))
            self.result.set(self.result.get() + (str(char)))
    def delete(self):
        self.string.set(self.string.get()[0:-1])
        self.result.set(self.result.get()[0:-1])
        self.show.set("")

calculator()
